/*
 * This file was generated by the Gradle 'init' task.
 *
 * This generated file contains a sample Java application project to get you started.
 * For more details on building Java & JVM projects, please refer to https://docs.gradle.org/9.0.0/userguide/building_java_projects.html in the Gradle documentation.
 * This project uses @Incubating APIs which are subject to change.
 */

plugins {
    // Apply the application plugin to add support for building a CLI application in Java.
    id 'application'
    id 'org.openjfx.javafxplugin' version '0.1.0' // JavaFX 지원
}

repositories {
    // Use Maven Central for resolving dependencies.
    mavenCentral()
}

dependencies {
    // This dependency is used by the application.
    // implementation libs.guava
    testImplementation 'org.junit.jupiter:junit-jupiter:5.11.3'
    implementation 'com.google.code.gson:gson:2.10.1'
    
    // JavaFX headless 테스트를 위한 Monocle
    testImplementation 'org.testfx:openjfx-monocle:jdk-12.0.1+2'
}

testing {
    suites {
        // Configure the built-in test suite
        test {
            // Use JUnit Jupiter test framework
            useJUnitJupiter('5.11.3')
        }
    }
}

// Apply a specific Java toolchain to ease working on different environments.
java {
    toolchain {
        languageVersion = JavaLanguageVersion.of(17)
    }
}

application {
    // Define the main class for the application.
    mainClass = 'team13.tetris.App'
}

// 추가
tasks.test {
    // Enable JUnit 5 (Jupiter) support in Gradle
    useJUnitPlatform()
    
    // JavaFX headless 모드 설정
    systemProperty 'java.awt.headless', 'true'
    systemProperty 'testfx.robot', 'glass'
    systemProperty 'testfx.headless', 'true'
    systemProperty 'prism.order', 'sw'
    systemProperty 'prism.text', 't2k'
    systemProperty 'glass.platform', 'Monocle'
    systemProperty 'monocle.platform', 'Headless'
    
    // Show standard output and error during test execution
    testLogging {
        showStandardStreams = false
        events "passed", "skipped", "failed"
        exceptionFormat "full"
    }
}

// 추가
javafx {
    version = "17.0.12"
    modules = [ 'javafx.controls', 'javafx.fxml' ]
}

// Ensure Java compiler reads source files as UTF-8 so non-ASCII comments compile
tasks.withType(JavaCompile).configureEach {
    options.encoding = 'UTF-8'
    // 명시적으로 Java 17 호환으로 컴파일하도록 설정합니다.
    options.release = 17
}

// jpackage 커스텀 태스크
tasks.register('jpackage', Exec) {
    dependsOn 'installDist'
    group = 'distribution'
    description = 'Creates a native Windows application package using jpackage'
    
    doFirst {
        def appVersion = System.getenv('APP_VERSION') ?: '1.0.0'
        def iconPath = file('src/main/resources/icon.ico').absolutePath
        def inputDir = file("${buildDir}/install/app/lib").absolutePath
        def outputDir = file("${buildDir}/jpackage").absolutePath
        
        // 출력 디렉토리 생성
        file(outputDir).mkdirs()
        
        // 메인 JAR 파일 찾기
        def libDir = file("${buildDir}/install/app/lib")
        def jarFiles = fileTree(dir: libDir, include: '*.jar')
        
        if (jarFiles.isEmpty()) {
            throw new GradleException("No JAR files found in ${libDir}")
        }
        
        def mainJar = jarFiles.files.find { it.name.startsWith('app') }
        if (mainJar == null) {
            mainJar = jarFiles.files.first()
        }
        
        println "📦 Creating Windows package..."
        println "   Version: ${appVersion}"
        println "   Icon: ${iconPath}"
        println "   Input: ${inputDir}"
        println "   Main JAR: ${mainJar.name}"
        println "   Total JARs: ${jarFiles.size()}"
        
        // commandLine 설정
        commandLine = [
            'jpackage',
            '--type', 'app-image',
            '--name', 'Tetris',
            '--app-version', appVersion,
            '--input', inputDir,
            '--main-jar', mainJar.name,
            '--main-class', 'team13.tetris.App',
            '--icon', iconPath,
            '--dest', outputDir,
            '--java-options', '-Xmx512m'
        ]
    }
    
    doLast {
        def outputDir = file("${buildDir}/jpackage").absolutePath
        println "✅ Package created at: ${outputDir}\\Tetris"
    }
}